datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

// one-to-many Band -> Albums
model Band {
  @@map("bands")

  id String @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  name String @unique
  albums Album[]
  members BandMember[]

}

// one-to-many Album -> Songs
model Album {
  @@map("albums")

  id String @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid

  name String
  bandId String @map("band_id") @db.Uuid
  band Band @relation(fields: [bandId], references: [id])
  songs Song[]

  @@unique([name, bandId], name: "uniqueAlbumNamePerBand")
}

model Song {
  @@map("songs")

  id String @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid

  albumId String @map("album_id") @db.Uuid
  album Album @relation(fields: [albumId], references: [id])
  name String
  writingCredits Musician[] // implicit many-to-many
}

model Musician {
  @@map("musicians")

  id String @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid

  name String
  members BandMember[]
  songs Song[] // implicit many-to-many
}

// Explicit many-to-many Band <-> Musician
model BandMember {
  @@map("band_members")

  id String @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid

  active Boolean @default(true)
  bandId String @map("band_id") @db.Uuid
  band Band @relation(fields: [bandId], references: [id])
  musicianId String @map("musician_id") @db.Uuid
  musician Musician @relation(fields: [musicianId], references: [id])
}
